configpath = "/.boltz/boltz.conf"
dbpath = "/.boltz/boltz.db"
logpath = "/.boltz/boltz.log"
datadir = "/.boltz"

# This mnemonic is not for the wallet that holds the onchain coins
# but the claim and refund keys are derived from it
mnemonicpath = "/.boltz/seed.dat"

# Possible values are: error, warning, info, verbose, debug, silly
loglevel = "debug"

# The backend can also connect to a PostgreSQL database
# When configured, it takes precedence over SQLite
# [postgres]
# host = "127.0.0.1"
# port = 5432
# database = "boltz"
# username = "boltz"
# password = "boltz"

# Logs can be sent to a Loki log aggregator
# lokiHost = "http://127.0.0.1:3100"
# lokiNetwork = "regtest"

# This value configures the type of the lockup address of normal Submarine Swaps:
#   - false: P2SH nested P2WSH
#   - true: P2WSH
swapwitnessaddress = false

# Enables the prepay minerfee Reverse Submarine Swap procotol
# If this value is "true", an invoice for the miner fee has to be paid
# before hold invoice of the Revese Swap
prepayminerfee = false

# This is the REST API that should be exposed to the public
# It does not support HTTPS but only plaintext HTTP. A reverse
# proxy should be setup with a web server like Nginx
[api]
host = "127.0.0.1"
port = 9_001

# The backend can expose a metrics endpoint about swap count, volume, etc
# [prometheus]
# host = "127.0.0.1"
# port = 9_092

# And this the gRPC API that is used by the boltz-cli executable
[grpc]
host = "127.0.0.1"
port = 9_000
certpath = "/.boltz/tls.cert"
keypath = "/.boltz/tls.key"

# The interval in seconds at which new rates for pairs that
# do not have a hardcoded rate should be updates
[rates]
interval = 1

# Boltz Backend allows for backing up LND channel backups and
# the database to a Google Cloud Storage Bucket
[backup]
#email = ""
#privatekeypath = ""
#bucketname = ""
# Cron interval at which a new backup should be uploaded. The default value is daily
#interval = "0 0 * * *"

# Boltz backend supports sending messages to Discord after successful and
# failed Swaps and if the wallet or channel balance is below a configurable threshold
[notification]
token = ""
channel = ""
# A string to prefix all messages with
prefix = "mainnet"
# When Mattermost should be used instead of Discord for notifications
# mattermostUrl = ""
# Optionally, important alerts can be sent to a different channel
# channelAlerts = ""

# Interval in minutes at which the wallet and channel balances should be checked 
interval = 1
# Some Discord commands (like withdraw) require a TOTP token
# This is the path to the secret of that TOTP token
otpsecretpath = "/.boltz/otpSecret.dat"

# The array "pairs" configures the trading pairs that Boltz should support
# A pair can have the following options:
# - "base" (required): base currency
# - "quote" (required): quote currency
# - "timeoutDelta": after how many minutes a Swap of that pair should timeout
# - "rate": the rate for a pair can be hardcoded (only sensible for same currency pairs);  
#           if the rate is not hardcoded the mean value from these exchanges will be used:
#             - Binance
#             - Bitfinex 
#             - Coinbase Pro
#             - Kraken
#             - Poloniex
# - "fee": percentage of the swapped amount that should be charged as fee
# - "swapInFee" (optional): same as "fee" but for swaps from onchain to lightning; defaults to "fee" if not set
[[pairs]]
base = "BTC"
quote = "BTC"
rate = 1

maxSwapAmount = 10_000_000
minSwapAmount = 10_000

# Expiry of the invoices generated for reverse swaps of this pair
# If not set, half of the expiry time of the reverse swap will be used
invoiceExpiry = 7200

    # Timeouts in minutes
    [pairs.timeoutDelta]
    reverse = 1440
    swapMinimal = 1440
    swapMaximal = 2880
    swapTaproot = 10080

[[pairs]]
base = "L-BTC"
quote = "BTC"
rate = 1
fee = 0
swapInFee = 0

maxSwapAmount = 10_000_00
minSwapAmount = 100_000

    [pairs.timeoutDelta]
    reverse = 1440
    swapMinimal = 1440
    swapMaximal = 2880
    swapTaproot = 10080

# The array "currencies" configures the chain and LND clients for the "pairs"
# Not configuring the LND client is possible but will cause that chain not to support Lightning
# The values are pretty self explainatory apart from: "minWalletBalance" and "minChannelBalance" which trigger
# a Discord notification
[[currencies]]
symbol = "BTC"
network = "bitcoinTestnet"
minWalletBalance = 10_000_000
minChannelBalance = 10_000_000
maxZeroConfAmount = 10_000_000

# Onchain wallet provider
# Options: "core" or "lnd"
# Defaults to "lnd"
preferredWallet = "core"

# Can be set to alert about the balance of an unused wallet being more than a certain threshold
# maxUnusedWalletBalance = 100_000

    [currencies.chain]
    host = "bitcoin"
    <% if ( net === 'testnet' ) { %>
    port = 18332
    <% } else if ( net === 'regtest' ) { %>
    port = 18443
    <% } else { %>
    port = 8332
    <% } %>
    path = "/wallet/spending01.dat"

    # The requests to Bitcoin Core like clients can be authenticated with cookie files or user/password
    # If both are configured, cookie files are preferred
    #cookie = ""

    user="<%= bitcoin_rpcuser %>"
    password="<%= bitcoin_rpcpassword %>"

    # Optional API endpoint of a MempoolSpace instance running on the chain of the configured client
    mempoolSpace = "https://mempool.space/api"

    # The ZMQ endpoints for a chain can be configured here
    # If they are not set, those endpoints are fetched via the "getzmqnotifications" RPC method of the node
    zmqpubrawtx = "tcp://bitcoin:18502"
    zmqpubrawblock = "tcp://bitcoin:18501"

    # hashblock is not required and should only be used as fallback in case rawblock is not available
    # zmqpubhashblock = ""

    <% if ( features.indexOf('lightning') !== -1 && lightning_implementation === 'lnd' ) { %>
    [currencies.lnd]
    host = "lightning"
    port = 10_009
    certpath = "/.lightning/bitcoin/tls.cert"
    macaroonpath = "/.lightning/bitcoin/admin.macaroon"
    maxPaymentFeeRatio = 0
    <% } %>

    <% if ( features.indexOf('lightning') !== -1 && lightning_implementation === 'c-lightning' ) { %>
    # A CLN node can be connected via its gRPC interface
    [currencies.cln]
    host = "lightning"
    port = 9291
    rootCertPath = "/.lightning/testnet/ca.pem"
    privateKeyPath = "/.lightning/testnet/client-key.pem"
    certChainPath = "/.lightning/testnet/client.pem"

        # The Boltz hold invoice plugin is required: https://github.com/BoltzExchange/boltz-backend/tree/master/tools/plugins/hold
        [currencies.cln.hold]
        host = "lightning"
        port = 9292
        rootCertPath = "/.lightning/testnet/hold/ca.pem"
        privateKeyPath = "/.lightning/testnet/hold/client-key.pem"
        certChainPath = "/.lightning/testnet/hold/client.pem"

        # Optionally, mpay (https://github.com/BoltzExchange/boltz-backend/tree/master/tools/plugins/mpay) can be used to pay invoices
        #[currencies.cln.mpay]
        #host = "127.0.0.1"
        #port = 9293
        #rootCertPath = "/.lightning/testnet/mpay/ca.pem"
        #privateKeyPath = "/.lightning/testnet/mpay/client-key.pem"
        #certChainPath = "/.lightning/testnet/mpay/client.pem"
    <% } %>

[liquid]
symbol = "L-BTC"
network = "liquidTestnet"

maxSwapAmount = 4_294_967
minSwapAmount = 10_000

minWalletBalance = 100_000_000

    [liquid.chain]
    host = "elements"
    <% if (net === 'mainnet') { %>
    port = 7041
    <% } else if (net === 'testnet') { %>
    port = 18891
    <% } else { %>
    port = 18885
    <% } %>
    path = "/wallet/spending01.dat"
    user="<%= bitcoin_rpcuser %>"
    password="<%= bitcoin_rpcpassword %>"
