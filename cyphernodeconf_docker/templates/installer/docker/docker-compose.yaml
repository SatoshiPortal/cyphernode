version: "3"

services:

  ##########################
  # POSTGRESQL             #
  ##########################

  postgres:
    image: postgres:<%= postgres_version %>
    user: $USER
    entrypoint: sh -c 'rm -f /container_monitor/postgres_ready ; exec docker-entrypoint.sh -c logging_collector=true -c log_directory=/cnlogs/'
    env_file:
      - .env/postgres.env
    volumes:
      - "<%= postgres_datapath %>:/var/lib/postgresql/data"
      - "<%= logs_datapath %>:/cnlogs"
      - container_monitor:/container_monitor
    healthcheck:
      test: sh -c 'psql -U cyphernode -c "select 1;" && touch /container_monitor/postgres_ready || rm -f /container_monitor/postgres_ready'
      interval: 30s
      timeout: 10s
      retries: 10
    stop_grace_period: 90s
    networks:
      - cyphernodenet
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  <% if ( features.indexOf('tor') !== -1 ) { %>
  ##########################
  # TOR                    #
  ##########################

  tor:
    image: cyphernode/tor:<%= tor_version %>
    # Sleeping 10 seconds to let lightning and traefik start
    command: $USER sh -c 'rm -f /container_monitor/tor_ready ; sleep 10 ; export HOME=/tor ; exec tor -f /tor/torrc'
    volumes:
      - "<%= tor_datapath %>:/tor"
      - container_monitor:/container_monitor
    healthcheck:
      test: su-exec $USER sh -c 'tor-resolve torproject.org && touch /container_monitor/tor_ready || rm -f /container_monitor/tor_ready'
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - cyphernodenet
      - cyphernodeappsnet
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>
  <% } %>

  <% if ( features.indexOf('lightning') !== -1 && lightning_implementation === 'c-lightning' ) { %>
  ##########################
  # LIGHTNING              #
  ##########################

  lightning:
    image: cyphernode/clightning:<%= lightning_version %>
    user: $USER
    command: /.lightning/bitcoin/entrypoint.sh
    <% if( lightning_expose ) { %>
    ports:
      - "9735:9735"
    <% } %>
    volumes:
      - "<%= lightning_datapath %>:/.lightning"
      - "<%= bitcoin_datapath %>/bitcoin-client.conf:/.bitcoin/bitcoin.conf:ro"
      - container_monitor:/container_monitor
    healthcheck:
      test: lightning-cli getinfo && touch /container_monitor/lightning_ready || rm -f /container_monitor/lightning_ready
      interval: 30s
      timeout: 10s
      retries: 10
    stop_grace_period: 30s
    networks:
      - cyphernodenet
    <% if ( features.indexOf('tor') !== -1 ) { %>
    depends_on:
      - tor
    <% } %>
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>
  <% } %>

  <% if( bitcoin_mode === 'internal' ) { %>
  ##########################
  # BITCOIN                #
  ##########################

  bitcoin:
    <%   if ( net === 'regtest' ) { %>
    # regtest only
    image: cyphernode/knots:<%= bitcoin_version %>
    <% } else if ( features.indexOf('wasabi') !== -1 && net === 'testnet' ) { %>
    image: cyphernode/knots:<%= bitcoin_version %>
    <% } else { %>
    image: cyphernode/bitcoin:<%= bitcoin_version %>
    user: $USER
    command: /.bitcoin/entrypoint.sh
    <% if( bitcoin_expose ) { %>
    ports:
      - "<%= (net === 'regtest') ? '18444:18444' : ((net === 'testnet') ? '18333:18333' : '8333:8333') %>"
    <% } %>
    volumes:
      - "<%= bitcoin_datapath %>:/.bitcoin"
      - "<%= bitcoin_datapath %>/createWallets.sh:/.bitcoin/createWallets.sh:ro"
      - "<%= bitcoin_datapath %>/walletnotify.sh:/.bitcoin/walletnotify.sh:ro"
      - "<%= bitcoin_datapath %>/blocknotify.sh:/.bitcoin/blocknotify.sh:ro"
      - container_monitor:/container_monitor
    healthcheck:
      <% if( net === 'regtest' ) { %>
      test: sh -c '[ `bitcoin-cli getblockcount` -ge 101 ] && touch /container_monitor/bitcoin_ready || rm -f /container_monitor/bitcoin_ready'
      <% } else { %>
      test: bitcoin-cli echo && touch /container_monitor/bitcoin_ready || rm -f /container_monitor/bitcoin_ready
      <% } %>
      interval: 30s
      timeout: 10s
      retries: 10
    stop_grace_period: 30s
    networks:
      - cyphernodenet
    <% if ( features.indexOf('tor') !== -1 ) { %>
    depends_on:
      - tor
    <% } %>
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>
  <% } %>

  ##########################
  # PROXY                  #
  ##########################

  proxy:
    image: cyphernode/proxy:<%= proxy_version %>
    user: $USER
    command: ./startproxy.sh
    env_file:
      - .env/proxy.env
    <% if ( devmode ) { %>
    ports:
      - "8888:8888"
    <% } %>
    volumes:
      - "<%= logs_datapath %>:/cnlogs"
      - "<%= proxy_datapath %>:/proxy/db"
      <% if ( features.indexOf('lightning') !== -1 && lightning_implementation === 'c-lightning' ) { %>
      - "<%= lightning_datapath %>:/proxy/.lightning"
      <% } %>
      <% if ( features.indexOf('otsclient') !== -1 ) { %>
      - "<%= otsclient_datapath %>:/proxy/otsfiles"
      <% } %>
      <% if ( features.indexOf('tor') !== -1 ) { %>
      - "<%= tor_datapath %>:/proxy/tor"
      <% } %>
      - container_monitor:/container_monitor
    healthcheck:
      test: curl localhost:8888/helloworld && touch /container_monitor/proxy_ready || rm -f /container_monitor/proxy_ready
      interval: 30s
      timeout: 10s
      retries: 10
    stop_grace_period: 30s
    networks:
      - cyphernodenet
    depends_on:
      - postgres
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  ##########################
  # PROXYCRON              #
  ##########################

  proxycron:
    image: cyphernode/proxycron:<%= proxycron_version %>
    env_file:
      - .env/proxycron.env
    networks:
      - cyphernodenet
    depends_on:
      - proxy
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  ##########################
  # BROKER                 #
  ##########################

  broker:
    image: eclipse-mosquitto:<%= mosquitto_version %>
    networks:
      - cyphernodenet
      - cyphernodeappsnet
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  ##########################
  # NOTIFIER               #
  ##########################

  notifier:
    image: cyphernode/notifier:<%= notifier_version %>
    command: $USER ./startnotifier.sh
    env_file:
      - .env/notifier.env
    volumes:
      - "<%= logs_datapath %>:/cnlogs"
    networks:
      - cyphernodenet
      - cyphernodeappsnet
    depends_on:
      - broker
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  ##########################
  # PYCOIN                 #
  ##########################

  pycoin:
    image: cyphernode/pycoin:<%= pycoin_version %>
    command: $USER ./startpycoin.sh
    env_file:
      - .env/pycoin.env
    <% if ( devmode ) { %>
    ports:
      - "7777:7777"
    <% } %>
    volumes:
      - "<%= logs_datapath %>:/cnlogs"
    networks:
      - cyphernodenet
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  <% if ( features.indexOf('otsclient') !== -1 ) { %>
  ##########################
  # OTSCLIENT              #
  ##########################

  otsclient:
    image: cyphernode/otsclient:<%= otsclient_version %>
    command: $USER /script/startotsclient.sh
    env_file:
      - .env/otsclient.env
    volumes:
      - "<%= logs_datapath %>:/cnlogs"
      - "<%= otsclient_datapath %>:/otsfiles"
      - "<%= bitcoin_datapath %>/bitcoin-client.conf:/.bitcoin/bitcoin.conf:ro"
    networks:
      - cyphernodenet
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>
  <% } %>

  <% if ( features.indexOf('wasabi') !== -1 ) { %>
  ##########################
  # WASABI                 #
  ##########################

  <%   if ( net === 'regtest' || net === 'testnet' ) { %>
  # testnet or regtest only
  wasabi-backend:
    image: cyphernode/wasabi-backend:<%= wasabi_version %>
    entrypoint: sh -c 'sleep 5 ; while [ ! -f "/container_monitor/bitcoin_ready" ]; do echo "bitcoin not ready" ; sleep 5 ; done ; echo "bitcoin ready!" ; /app/docker-entrypoint.sh'
    environment:
      - "WASABI_BIND=http://wasabi-backend:37127/"
    volumes:
      - "<%= wasabi_datapath %>/backend:/root/.walletwasabi/backend"
      - container_monitor:/container_monitor:ro
    stop_grace_period: 30s
    networks:
      - cyphernodenet
    <% if (docker_mode == 'compose') { %>
    restart: always
    <% } %>
    depends_on:
      - bitcoin
#    deploy:
#      placement:
#        constraints: [node.hostname==dev]
  <%   } %>

  <%   for ( let index=0; index<wasabi_instance_count; index++ ) { %>
  wasabi_<%= index %>:
    image: cyphernode/wasabi:<%= wasabi_version %>
    entrypoint: sh -c 'sleep <%= (index+1) * 5 + 11 %> ; while [ ! -f "/container_monitor/bitcoin_ready" ]; do echo "bitcoin not ready" ; sleep <%= index * 5 + 10 %> ; done ; echo "bitcoin ready!" ; /app/docker-entrypoint.sh'
    environment:
      - "WASABI_RPC_USER=<%= wasabi_rpcuser %>:<%= wasabi_rpcpassword %>"
      - "WASABI_RPC_CFG=/tmp/wasabi_curlcfg.properties"

    volumes:
      - "<%= wasabi_datapath %>/<%= index %>:/root/.walletwasabi/client"
      - container_monitor:/container_monitor:ro
    stop_grace_period: 30s
    networks:
      - cyphernodenet
    <% if (docker_mode == 'compose') { %>
    restart: always
    <% } %>
    depends_on:
      - bitcoin
      <%   if ( net === 'regtest' | net === 'testnet' ) { %>
      - wasabi-backend
      <%   } %>
#    deploy:
#      placement:
#        constraints: [node.hostname==dev]
  <%   } %>
  <% } %>

  ##########################
  # GATEKEEPER             #
  ##########################

  gatekeeper:
    # HTTP authentication API gate
    image: cyphernode/gatekeeper:<%= gatekeeper_version %>
    command: $USER
    env_file:
      - .env/gatekeeper.env
    <% if( gatekeeper_expose ) { %>
    ports:
      - "<%= gatekeeper_port %>:<%= gatekeeper_port %>"
    <% } %>
    volumes:
      - "<%= logs_datapath %>:/cnlogs"
      - "<%= gatekeeper_datapath %>/certs:/etc/ssl/certs:ro"
      - "<%= gatekeeper_datapath %>/private:/etc/ssl/private:ro"
      - "<%= gatekeeper_datapath %>/keys.properties:/etc/nginx/conf.d/keys.properties"
      - "<%= gatekeeper_datapath %>/api.properties:/etc/nginx/conf.d/api.properties"
      - "<%= gatekeeper_datapath %>/default.conf:/etc/nginx/conf.d/default.conf"
      - "<%= gatekeeper_datapath %>/htpasswd:/etc/nginx/conf.d/status/htpasswd"
      - "<%= gatekeeper_datapath %>/installation.json:/etc/nginx/conf.d/s/stats/installation.json"
      - "<%= gatekeeper_datapath %>/client.7z:/etc/nginx/conf.d/s/stats/client.7z"
      - "<%= gatekeeper_datapath %>/config.7z:/etc/nginx/conf.d/s/stats/config.7z"
      - container_monitor:/container_monitor
    networks:
      - cyphernodenet
      - cyphernodeappsnet
    depends_on:
      - proxy
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

  ##########################
  # TRAEFIK                #
  ##########################

  traefik:
    image: traefik:<%= traefik_version %>
    ports:
      - <%= traefik_http_port %>:<%= traefik_http_port %>
      - <%= traefik_https_port %>:<%= traefik_https_port %>
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "<%= traefik_datapath%>/traefik.toml:/etc/traefik/traefik.toml:ro"
      <% if (typeof traefik_use_letsencrypt !== 'undefined' && traefik_use_letsencrypt) { %>
      - "<%= traefik_datapath%>/acme.json:/etc/traefik/acme.json"
      <% } %>
      - "<%= traefik_datapath%>/htpasswd:/htpasswd/htpasswd:ro"
    networks:
      - cyphernodeappsnet
    depends_on:
      - gatekeeper
    <% if ( docker_mode === 'swarm' ) { %>
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.io.cyphernode == true
      restart_policy:
        condition: "any"
        delay: 1s
      update_config:
        parallelism: 1
    <% } else { %>
    restart: always
    <% } %>

volumes:
  container_monitor:

networks:
  cyphernodenet:
    external: true
  cyphernodeappsnet:
    external: true
