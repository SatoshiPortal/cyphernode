{
  "features": "What optional features do you want me to activate?  Select multiple using the space bar.",
  "net": "Running on what Bitcoin network?",
  "run_as_different_user": "We recommend running Cyphernode as a different user.  Using your current user would give Cyphernode your current access rights, which could be a security issue especially if you are a sudoer.",
  "username": "Run Cyphernode as what user?  We recommend user 'cyphernode' (without the quotes).  If the user does not exist, we will create it for you.",
  "use_xpub": "Cyphernode can take care of deriving your addresses from your xPub and the derivation path you want.  If you want, you can provide your xPub and derivation path right now and call 'derive' with only the index instead of having to pass your xPub and derivation path at each call.",
  "xpub": "Cyphernode can derive addresses from this default xPub key.  With that functionality, you don't have to provide your xPub every time you call the derive endpoints.",
  "derivation_path": "Cyphernode can derive addresses from this default derivation path.  With that functionality, you don't have to provide your derivation path every time you call the derive endpoints.",
  "proxy_datapath": "The proxy container (through where all the requests to Cyphernode goes) uses a sqlite3 database for its tasks.  The DB will be mounted from a local path, easy to back up from outside Docker.  Please provide where you want the proxy DB to be stored locally.",
  "gatekeeper_clientkeyspassword": "The Gatekeeper authenticates and authorizes (or not) all the requests to Cyphernode before delegating them (or not) to the proxy.  Following the JWT (JSON Web Tokens) standard, it uses HMAC signature verification to allow or deny access.  Signatures are created and verified using secret keys.  We are going to generate the secret keys and keep them in an encrypted file.  Please provide the encryption passphrase.",
  "gatekeeper_clientkeyspassword_c": "Confirm encryption passphrase for the Gatekeeper's keys file.",
  "gatekeeper_recreatekeys": "The Gatekeeper keys already exist, do you want to regenerate them?  This will overwrite existing ones.",
  "gatekeeper_recreatecert": "The Gatekeeper TLS (SSL) certificates already exist, do you want to regenerate them?  This will overwrite existing ones.",
  "gatekeeper_datapath": "The Gatekeeper's files (TLS certs, HMAC keys, Groups/API) will be stored in a container's mounted directory.  Please provide the local mounted path to that directory.",
  "gatekeeper_edit_apiproperties": "Not recommended.  It is possible to manually edit the API endpoints/groups authorization.",
  "gatekeeper_apiproperties": "You are about to edit the api.properties file.  The format of the file is pretty simple: for each action, you will find what access group can access it.  Admin group can do what Spender group can, and Spender group can do what Watcher group can.  Internal group is for the endpoints accessible only within the Docker Swarm, like the backoffice tasks used by the Cron container.  The access groups for each API id/key are found in the keys.properties file.",
  "gatekeeper_sslcert": "** gatekeeper_sslcert **",
  "gatekeeper_sslkey": "** gatekeeper_sslkey **",
  "gatekeeper_cns": "Domain names and/or IP addresses used when calling Cyphernode.  Used to create valid TLS certificates.  For example, if https://cyphernodehost/getbestblockhash and https://192.168.7.44/getbestblockhash will be used, provide cyphernodehost,192.168.7.44 as a possible domains.  '127.0.0.1,localhost' will be added automatically.  Make sure the provided domain names are in your DNS or client's hosts file and is reachable.",
  "bitcoin_mode": "Cyphernode can spawn a new Bitcoin Core full node for its own use.  But if you already have a Bitcoin Core node running, Cyphernode can use it.",
  "bitcoin_node_ip": "Cyphernode uses Bitcoin Core RPC interface for its tasks.  Please provide the IP address of your current Bitcoin Core node.",
  "bitcoin_rpcuser": "Bitcoin Core's RPC username used by Cyphernode when calling the node.",
  "bitcoin_rpcpassword": "Bitcoin Core's RPC password used by Cyphernode when calling the node.",
  "bitcoin_prune": "If you don't have at least 350GB of disk space, you should run Bitcoin Core in prune mode.  NOTE: when running Bitcoin Core in prune mode, the incoming transactions' fees cannot be computed by Cyphernode and won't be part of the addresses watching's callbacks payload.",
  "bitcoin_prune_size": "Minimum value is 550 MB.  Is the number of MB Bitcoin Core will allot for raw block & undo data.",
  "bitcoin_uacomment": "User Agent string used by Bitcoin Core.",
  "bitcoin_datapath": "Path name to where Bitcoin Core's data files (blockchain data, wallets, configs, etc.) are stored.  Will be mounted in the Bitcoin node's container.  If you already have a sync'ed node, you can copy data there to be used by the node, instead of resyncing everything.  NOTE: only copy chainstate/ and blocks/ contents.",
  "bitcoin_expose": "By default, Bitcoin node ports won't be published outside of Docker.  Do you want to expose them so that your node can be accessed from outside of the Docker network?",
  "lightning_implementation": "Multiple LN implementations exist.  Please choose the one you want to use with Cyphernode.",
  "lightning_external_ip": "If you want you LN node to be accessible from the Internet, provide the IP address that other LN nodes will use to connect to it.  NOTE: That won't make your router forward needed LN ports; you still have the responsability to configure and manage that part.",
  "lightning_nodename": "LN nodes have names.  Choose the name you want for yours.",
  "lightning_nodecolor": "LN nodes have colors.  Choose the color you want for yours in RGB format (RRGGBB).  For example, pure red would be FF0000.",
  "lightning_datapath": "Path name to where LN's data files are stored.  Will be mounted in the LN node's container.",
  "lightning_expose": "By default, LN node ports won't be published outside of Docker.  Do you want to expose them so that your node can be accessed from outside of the Docker network?",
  "otsclient_datapath": "Full path where the OTS files will be stored.  This path will be mounted to the otsclient container which will create the OTS files when stamping and update them when upgrading stamps. It will also be mounted to the proxy container so that it can serve the ots_getfile and send the OTS files to clients.",
  "installer_mode": "As of today, two installation modes are supported: local docker (self-hosted) or on a lunanode VM (hosted at lunanode.com).",
  "installer_cleanup": "Do you want to remove this configurator Docker image after installation?  This would free about 150MB of disk space.",
  "docker_mode": "Cyphernode Docker services can be run using Docker Swarm (https://docs.docker.com/engine/swarm/) or docker-compose (https://docs.docker.com/compose/overview/).  Both will work, some users prefer one to another depending on deployment types, scalability, current framework, etc.  If you don't know and the last Bitcoin block mined has an odd height number, choose Swarm... or not.",
  "__default__": "Key missing!<br>There is no <font italic='true'>help</font> <font color='#ff0000'>text</font> for this entry. :-("
}
